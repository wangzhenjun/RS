#include <cmath>
#include <algorithm>
#include <vector>
#include <iostream>
#include <cstdio>
#include <cstdlib>

using namespace std;

const int user = 943+1;
const int item = 1682+1;
const int feature = 50+1;
const int max_iter = 1000;

int user_item[user][item];
double user_feature[user][feature];
double item_feature[item][feature];
double user_bias[user];
double item_bias[item];
double predict[user][item];
double average = 0;
int test_data[20010][3];

void getTrainData()
{
    int u, i, r;
    long long t;
    freopen("E:\\DL\\MovieLens\\ml-100k\\u1.base", "r", stdin);
    while (~scanf("%d%d%d%lld", &u, &i, &r, &t))
    {
        user_item[u][i] = r;
    }
    fclose(stdin);
}

void getTestData()
{
    int j = 0;
    int u, i, r;
    long long t;
    freopen("E:\\DL\\MovieLens\\ml-100k\\u1.test", "r", stdin);
    while (~scanf("%d%d%d%lld", &u, &i, &r, &t))
    {
        test_data[j][0] = u;
        test_data[j][1] = i;
        test_data[j][2] = r;
        j++;
    }
    fclose(stdin);
}

void init()
{
    double avg = 0;
    int cnt = 0;
    for (int i = 1; i < user; ++i)
        for (int j = 1; j < item; ++j)
            if (user_item[i][j])
                avg += user_item[i][j], cnt++;
    avg /= cnt;
    average = avg;
    for (int i = 1; i < item; ++i)
    {
        double sum = 0;
        int cnt = 0;
        for (int j = 1; j < user; ++j)
            if (user_item[j][i])
                sum += user_item[j][i] - avg, cnt++;
        item_bias[i] = sum / (5 + cnt);
    }

    for (int i = 1;  i < user; ++i)
    {
        double sum = 0;
        int cnt = 0;
        for (int j = 1; j < item; ++j)
            if (user_item[i][j])
                sum += user_item[i][j] - avg - item_bias[j], cnt++;
        user_bias[i] = sum / (5 + cnt);
    }
}

double product(int ix, int jx)
{
    double ret = 0;
    for (int i = 1; i < feature; ++i)
        ret += user_feature[ix][i]*item_feature[jx][i];
    return ret;
}

double computeRmse()
{
    double sum = 0;
    int cnt = 0;
    for (int i = 1; i < user; ++i)
        for (int j = 1; j < item; ++j)
            if (user_item[i][j])
            {
                sum += pow(predict[i][j]-user_item[i][j], 2);
                cnt++;
            }
    return sqrt(sum / cnt);
}

double computeTestRmse()
{
    int cnt = 0;
    double sum = 0;
    for (int i = 0; test_data[i][0]; ++i)
    {
        cnt++;
        int u = test_data[i][0];
        int ii = test_data[i][1];
        int r = test_data[i][2];
        sum += pow(predict[u][ii]-r, 2);
    }
    return sqrt(sum / cnt);
}

void train(double lr, double penalty)
{
    double rmse = 100;
    int iter = 0;
    while (iter < max_iter)
    {
        for (int i = 1; i < user; ++i)
            for (int j = 1; j < item; ++j)
                predict[i][j] = product(i, j) + user_bias[i] + item_bias[j];
        double new_rmse = computeRmse();
        if (new_rmse < rmse)
            rmse = new_rmse;
        printf("ter: %d, Train RMSE: %lf ", iter, rmse);
        for (int i = 1; i < user; ++i)
        {
            for (int j = 1; j < item; ++j)
            {
                if (user_item[i][j])
                {
                    double error = user_item[i][j] - predict[i][j];
                    for (int k = 1; k < feature; ++k)
                    {
                        double tmp = user_feature[i][k];
                        user_feature[i][k] += lr * (error*item_feature[j][k] - penalty*user_feature[i][k]);
                        item_feature[j][k] += lr * (error*tmp - penalty*item_feature[j][k]);
                    }
                    double tmp = user_bias[i] + item_bias[j] - average;
                    user_bias[i] += lr * (error - penalty*tmp);
                    item_bias[j] += lr * (error - penalty*tmp);
                }
            }
        }
        printf("Test RMSE: %lf\n", computeTestRmse());
        ++iter;
    }
}

int main()
{
    getTrainData();
    getTestData();
    init();
    train(0.001, 0.003);
    
    return 0;
}
